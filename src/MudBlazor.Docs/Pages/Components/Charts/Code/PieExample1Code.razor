@* Auto-generated markup. Any changes will be overwritten *@
@namespace MudBlazor.Docs.Examples.Markup
<div class="mud-codeblock">
<div class="html"><pre>
<span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">div</span><span class="htmlTagDelimiter">&gt;</span>
    <span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudChart</span> <span class="htmlAttributeName">ChartType</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="enum">ChartType</span><span class="enumValue">.Pie</span><span class="quot">&quot;</span> <span class="htmlAttributeName">InputData</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="sharpVariable"><span class="atSign">&#64;</span>data</span><span class="quot">&quot;</span> <span class="htmlAttributeName">InputLabels</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="sharpVariable"><span class="atSign">&#64;</span>labels</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Width</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">300px</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Height</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">300px</span><span class="quot">&quot;</span> <span class="htmlTagDelimiter">/&gt;</span>
    <span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudButton</span> <span class="htmlAttributeName"><span class="atSign">&#64;</span>onclick</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">RandomizeData</span><span class="quot">&quot;</span><span class="htmlTagDelimiter">&gt;</span>Randomize Data<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudButton</span><span class="htmlTagDelimiter">&gt;</span>
    <span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudSlider</span> <span class="htmlAttributeName">Value</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">dataSize</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Min</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">0</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Max</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">20</span><span class="quot">&quot;</span> <span class="htmlAttributeName">T</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">int</span><span class="quot">&quot;</span> <span class="htmlAttributeName">ValueChanged</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue"><span class="atSign">&#64;</span>((value) =&gt; OnValueChanged(value))</span><span class="quot">&quot;</span><span class="htmlTagDelimiter">&gt;</span><span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudSlider</span><span class="htmlTagDelimiter">&gt;</span>
<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">div</span><span class="htmlTagDelimiter">&gt;</span>
</pre></div>
<div class="csharp"><pre>
<span class="atSign">&#64;</span>code {
    <span class="keyword">int</span> dataSize = <span class="number">4</span>;
    <span class="keyword">double</span>[] data = { <span class="number">77</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span> };
    <span class="keyword">string</span>[] labels = { <span class="string">&quot;Uranium&quot;</span>, <span class="string">&quot;Plutonium&quot;</span>, <span class="string">&quot;Thorium&quot;</span>, <span class="string">&quot;Caesium&quot;</span>, <span class="string">&quot;Technetium&quot;</span>, <span class="string">&quot;Promethium&quot;</span>, <span class="string">&quot;Polonium&quot;</span>, <span class="string">&quot;Astatine&quot;</span>, <span class="string">&quot;Radon&quot;</span>, <span class="string">&quot;Francium&quot;</span>, <span class="string">&quot;Radium&quot;</span>, <span class="string">&quot;Actinium&quot;</span>, <span class="string">&quot;Protactinium&quot;</span>, <span class="string">&quot;Neptunium&quot;</span>, <span class="string">&quot;Americium&quot;</span>, <span class="string">&quot;Curium&quot;</span>, <span class="string">&quot;Berkelium&quot;</span>, <span class="string">&quot;Californium&quot;</span>, <span class="string">&quot;Einsteinium&quot;</span>, <span class="string">&quot;Mudblaznium&quot;</span> };

    Random random = <span class="keyword">new</span> Random();
    <span class="keyword">void</span> RandomizeData()
    {
        <span class="keyword">var</span> new_data = <span class="keyword">new</span> <span class="keyword">double</span>[dataSize];
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; new_data.Length; i++)
            new_data[i] = random.NextDouble() * <span class="number">100</span>;
        data = new_data;
        StateHasChanged();
    }

    <span class="keyword">void</span> OnValueChanged(<span class="keyword">int</span> value)
    {
        dataSize = value;
        RandomizeData();
    }
}
</pre></div>
</div>
