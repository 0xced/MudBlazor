@* Auto-generated markup. Any changes will be overwritten *@
@namespace MudBlazor.Docs.Examples.Markup
<div class="mud-codeblock">
<div class="html"><pre>
<span class="atSign">&#64;</span>inject IDialogService Dialog

<span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudButton</span> <span class="htmlAttributeName">Variant</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="enum">Variant</span><span class="enumValue">.Outlined</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Color</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="enum">Color</span><span class="enumValue">.Primary</span><span class="quot">&quot;</span> <span class="htmlAttributeName"><span class="atSign">&#64;</span>onclick</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">OpenSimpleDialog</span><span class="quot">&quot;</span><span class="htmlTagDelimiter">&gt;</span>With Close Button<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudButton</span><span class="htmlTagDelimiter">&gt;</span>
</pre></div>
<div class="csharp"><pre>
<span class="atSign">&#64;</span>code {

    <span class="keyword">async</span> Task OpenSimpleDialog()
    {
        <span class="keyword">var</span> options = <span class="keyword">new</span> DialogOptions() { CloseButton = <span class="keyword">true</span> };
        <span class="keyword">var</span> userSelect = Dialog.Show&lt;DialogDialogOptionExample&gt;(<span class="string">&quot;With close button&quot;</span>);
    }
}
</pre></div>
</div>
