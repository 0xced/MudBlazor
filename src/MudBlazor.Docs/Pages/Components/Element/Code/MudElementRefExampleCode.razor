@* Auto-generated markup. Any changes will be overwritten *@
@namespace MudBlazor.Docs.Examples.Markup
<div class="mud-codeblock">
<div class="html"><pre>
<span class="atSign">&#64;</span>inject Microsoft.JSInterop.IJSRuntime Js


&lt;MudElement HtmlTag=&quot;button&quot;
            <span class="atSign">&#64;</span>onclick=&quot;Focus&quot;
            Style=&quot;padding: 16px 32px;
                   background-color: var(--mud-palette-tertiary-darken);
                   color: white;
                   font-size: 18px;
                   font-weight: bold;
                   border-radius: 8px;
                   box-shadow: 0 2px 7px var(--mud-palette-tertiary-darken);&quot;&gt;
    Click to focus
<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudElement</span><span class="htmlTagDelimiter">&gt;</span>

<span class="atSign">&#64;</span>*this element is going to be focused through JS and its reference*<span class="atSign">&#64;</span>

&lt;MudElement <span class="atSign">&#64;</span>bind-Ref=&quot;myRef&quot;
            HtmlTag=&quot;input&quot;
            Style=&quot;border: 1px solid lightgray;
                   border-radius:8px;
                   padding: 16px 32px;
                   outline-color: var(--mud-palette-tertiary-darken);
                   outline-width:5px;&quot;/&gt;
</pre></div>
<div class="csharp"><pre>
<span class="atSign">&#64;</span>code{
    ElementReference myRef = <span class="keyword">new</span> ElementReference();

    <span class="keyword">async</span> Task Focus()
    {
        <span class="comment">//this js snippet does `document.querySelector(myRef).focus();`</span>
       <span class="keyword">await</span> Js.InvokeVoidAsync(<span class="string">&quot;mudBlazorExamples.focusElement&quot;</span>, myRef);
    }
}
</pre></div>
</div>
