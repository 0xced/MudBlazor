@namespace MudBlazor.Docs
@using MudBlazor.Utilities

<div class="docs-section-source @Class">
    @if (!NoToolbar)
    {
    <div class="docs-content-toolbar">
        <div class="mud-flex-grow-1"></div>
        <MudIconButton Icon="@Icons.Material.Code" OnClick="OnShowCode" />
        <MudIconButton Icon="@Icons.Material.FileCopy" />
        <MudIconButton Icon="@Icons.Material.Refresh" />
    </div>
    }

    <div class="docs-source-code @(ShowCode? "docs-show-code" : "docs-hide-code")">
        @CodeComponent()
    </div>
    @if (!String.IsNullOrEmpty(FullCode))
    {
        <div class="docs-source-code @(ShowFullCode? "docs-show-code" : "docs-hide-code")">
            @FullCodeComponent()
        </div>
    }
</div>

@code {

    [Parameter] public string Code { get; set; }

    [Parameter] public string FullCode { get; set; }

    [Parameter] public string Class { get; set; }

    [Parameter] public bool ShowCode { get; set; } = true;

    [Parameter] public bool NoToolbar { get; set; }

    private bool ShowFullCode;

    public void OnShowCode()
    {
        if(!String.IsNullOrEmpty(Code) && String.IsNullOrEmpty(FullCode))
        {
            ShowCode = !ShowCode;
        }
        if(!String.IsNullOrEmpty(Code) && !String.IsNullOrEmpty(FullCode))
        {
            ShowCode = !ShowCode;
            ShowFullCode = !ShowFullCode;
        }
    }

    private Type CodeType=> Type.GetType("MudBlazor.Docs.Examples.Markup."+ Code + "Code");
    private Type FullCodeType => Type.GetType("MudBlazor.Docs.Examples.Markup." + FullCode + "Code");

    RenderFragment CodeComponent() => builder =>
    {
        builder.OpenComponent(0, CodeType);
        builder.CloseComponent();
    };

    RenderFragment FullCodeComponent() => builder =>
    {
        builder.OpenComponent(0, FullCodeType);
        builder.CloseComponent();
    };

}