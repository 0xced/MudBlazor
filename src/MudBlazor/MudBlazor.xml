<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MudBlazor</name>
    </assembly>
    <members>
        <member name="P:MudBlazor.MudBaseButton.Link">
            <summary>
            If set to a URL, clicking the button will open the referenced document. Use Target to specify where
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.Target">
            <summary>
            The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | <i>framename</i>
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.ForceLoad">
            <summary>
            If true, force browser to redirect outside component router-space.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.Command">
            <summary>
            Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.CommandParameter">
            <summary>
            Command parameter.
            </summary>
        </member>
        <member name="P:MudBlazor.MudBaseButton.OnClick">
            <summary>
            Button click event.
            </summary>
        </member>
        <member name="P:MudBlazor.MudComponentBase.Class">
            <summary>
            User class names, separated by space
            </summary>
        </member>
        <member name="P:MudBlazor.MudComponentBase.Style">
            <summary>
            User styles, applied on top of the component's own classes and styles
            </summary>
        </member>
        <member name="P:MudBlazor.MudComponentBase.Tag">
            <summary>
            Use Tag to attach any user data object to the component for your convenience.
            </summary>
        </member>
        <member name="P:MudBlazor.MudComponentBase.UserAttributes">
            <summary>
            UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Square">
            <summary>
            If true, rounded corners are disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Dense">
            <summary>
            If true, compact padding will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.NoIcon">
            <summary>
            If true, no alert icon will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Severity">
            <summary>
            The severity of the alert. This defines the color and icon used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.Class">
            <summary>
            User class names, separated by space.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAlert.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.Dense">
            <summary>
            If true, compact padding will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.Position">
            <summary>
            The positioning type. The behavior of the different options is described in the MDN web docs. Note: sticky is not universally supported and will fall back to static when unavailable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAppBar.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.StartIcon">
            <summary>
            Icon placed before the text if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.EndIcon">
            <summary>
            Icon placed before the text if set.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.Size">
            <summary>
            The Size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.Variant">
            <summary>
            The variant to use.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.Disabled">
            <summary>
            If true, the button will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.DisableElevation">
            <summary>
            If true, no drop-shadow will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudButton.ChildContent">
            <summary>
            Child content of MudButton.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.Size">
            <summary>
            The Size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.Icon">
            <summary>
            If applied Icon will be added to the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.Label">
            <summary>
            If applied the text will be added to the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.Disabled">
            <summary>
            If true, the button will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.DisableElevation">
            <summary>
            If true, no drop-shadow will be used.
            </summary>
        </member>
        <member name="P:MudBlazor.MudFab.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Icon">
            <summary>
            The Icon that will be used in the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Size">
            <summary>
            The Size of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Edge">
            <summary>
            If set uses a negative margin.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.DisableRipple">
            <summary>
            If true, disables ripple effect.
            </summary>
        </member>
        <member name="P:MudBlazor.MudIconButton.Disabled">
            <summary>
            If true, the button will be disabled.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Color">
            <summary>
            The color of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudChip.Size">
            <summary>
            The size of the button. small is equivalent to the dense button styling.
            </summary>
        </member>
        <member name="T:MudBlazor.Snackbars">
            <inheritdoc />
        </member>
        <member name="P:MudBlazor.MudTableBase.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Square">
            <summary>
            Set true to disable rounded corners
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Dense">
            <summary>
            Set true for rows with a narrow height
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Hover">
            <summary>
            Set true to see rows hover on mouse-over.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.FixedHeader">
            <summary>
            When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.Height">
            <summary>
            Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the
            attribute 'height' accepts, i.e. 500px. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.RowsPerPage">
            <summary>
            If the table has more items than this number, it will break the rows into pages of said size.
            Note: requires a MudTablePager in PagerContent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.CurrentPage">
            <summary>
            The page index of the currently displayed page. Usually called by MudTablePager.
            Note: requires a MudTablePager in PagerContent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.MultiSelection">
            <summary>
            Set to true to enable selection of multiple rows with check boxes. 
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.ToolBarContent">
            <summary>
            Optional. Add any kind of toolbar to this render fragment.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.HeaderContent">
            <summary>
            Add MudTh cells here to define the table header.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTableBase.PagerContent">
            <summary>
            Add MudTablePager here to enable breaking the rows in to multiple pages.
            </summary>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.Default(System.String)">
            <summary>
            Creates a CssBuilder used to define conditional CSS classes used in a component.
            Call Build() to return the completed CSS Classes as a string. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.Empty">
            <summary>
            Creates an Empty CssBuilder used to define conditional CSS classes used in a component.
            Call Build() to return the completed CSS Classes as a string. 
            </summary>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.#ctor(System.String)">
            <summary>
            Creates a CssBuilder used to define conditional CSS classes used in a component.
            Call Build() to return the completed CSS Classes as a string. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddValue(System.String)">
            <summary>
            Adds a raw string to the builder that will be concatenated with the next class or value added to the builder.
            </summary>
            <param name="value"></param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.String)">
            <summary>
            Adds a CSS Class to the builder with space separator.
            </summary>
            <param name="value">CSS Class to add</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.String,System.Boolean)">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">CSS Class to conditionally add.</param>
            <param name="when">Nullable condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.String,System.Func{System.Boolean})">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.Func{System.String},System.Boolean)">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">Function that returns a CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(System.Func{System.String},System.Func{System.Boolean})">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">Function that returns a CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(MudBlazor.Utilities.CssBuilder,System.Boolean)">
            <summary>
            Adds a conditional nested CssBuilder to the builder with space separator.
            </summary>
            <param name="value">CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClass(MudBlazor.Utilities.CssBuilder,System.Func{System.Boolean})">
            <summary>
            Adds a conditional CSS Class to the builder with space separator.
            </summary>
            <param name="value">CSS Class to conditionally add.</param>
            <param name="when">Condition in which the CSS Class is added.</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.AddClassFromAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Adds a conditional CSS Class when it exists in a dictionary to the builder with space separator.
            Null safe operation.
            </summary>
            <param name="additionalAttributes">Additional Attribute splat parameters</param>
            <returns>CssBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.CssBuilder.Build">
            <summary>
            Finalize the completed CSS Classes as a string.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.Default(System.String,System.String)">
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
            <param name="prop"></param>
            <param name="value"></param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.Default(System.String)">
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
            <param name="prop"></param>
            <param name="value"></param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.Empty">
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.#ctor(System.String,System.String)">
            <summary>
            Creates a StyleBuilder used to define conditional in-line style used in a component. Call Build() to return the completed style as a string.
            </summary>
            <param name="prop"></param>
            <param name="value"></param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String)">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddRaw(System.String)">
            <summary>
            Adds a raw string to the builder that will be concatenated with the next style or value added to the builder.
            </summary>
            <param name="prop"></param>
            <param name="value"></param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.String)">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="prop"></param>
            <param name="value">Style to add</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.String,System.Boolean)">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="prop"></param>
            <param name="value">Style to conditionally add.</param>
            <param name="when">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.Func{System.String},System.Boolean)">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="prop"></param>
            <param name="value">Style to conditionally add.</param>
            <param name="when">Condition in which the style is added.</param>
            <returns></returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.String,System.Func{System.Boolean})">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="prop"></param>
            <param name="value">Style to conditionally add.</param>
            <param name="when">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.Func{System.String},System.Func{System.Boolean})">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="prop"></param>
            <param name="value">Style to conditionally add.</param>
            <param name="when">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(MudBlazor.Utilities.StyleBuilder)">
            <summary>
            Adds a conditional nested StyleBuilder to the builder with separator and closing semicolon.
            </summary>
            <param name="builder">Style Builder to conditionally add.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(MudBlazor.Utilities.StyleBuilder,System.Boolean)">
            <summary>
            Adds a conditional nested StyleBuilder to the builder with separator and closing semicolon.
            </summary>
            <param name="builder">Style Builder to conditionally add.</param>
            <param name="when">Condition in which the style is added.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(MudBlazor.Utilities.StyleBuilder,System.Func{System.Boolean})">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            </summary>
            <param name="builder">Style Builder to conditionally add.</param>
            <param name="when">Condition in which the styles are added.</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyle(System.String,System.Action{MudBlazor.Utilities.ValueBuilder},System.Boolean)">
            <summary>
            Adds a conditional in-line style to the builder with space separator and closing semicolon..
            A ValueBuilder action defines a complex set of values for the property.
            </summary>
            <param name="prop"></param>
            <param name="builder"></param>
            <param name="when"></param>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.AddStyleFromAttributes(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Adds a conditional in-line style when it exists in a dictionary to the builder with separator.
            Null safe operation.
            </summary>
            <param name="additionalAttributes">Additional Attribute splat parameters</param>
            <returns>StyleBuilder</returns>
        </member>
        <member name="M:MudBlazor.Utilities.StyleBuilder.Build">
            <summary>
            Finalize the completed Style as a string.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:MudBlazor.Utilities.ValueBuilder.AddValue(System.String,System.Boolean)">
            <summary>
            Adds a space separated conditional value to a property.
            </summary>
            <param name="value"></param>
            <param name="when"></param>
            <returns></returns>
        </member>
        <member name="P:MudBlazor.MudAvatar.Square">
            <summary>
            If true, border-radius is set to 0.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Rounded">
            <summary>
            If true, border-radius is set to the themes default value.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Image">
            <summary>
            Link to image, if set a image will be displayed instead of text.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Color">
            <summary>
            The color of the component. It supports the theme colors.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.Size">
            <summary>
            The Size of the MudAvatar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudAvatar.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCard.Elevation">
            <summary>
            The higher the number, the heavier the drop-shadow. 0 for no shadow.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCard.Square">
            <summary>
            If true, border-radius is set to 0.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCard.Outlined">
            <summary>
            If true, card will be outlined.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCard.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardActions.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardContent.ChildContent">
            <summary>
            Child content of the component.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardHeader.CardHeaderAvatar">
            <summary>
            If used renders child content of the CardHeaderAvatar.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardHeader.CardHeaderContent">
            <summary>
            If used renders child content of the CardHeaderContent.
            </summary>
        </member>
        <member name="P:MudBlazor.MudCardHeader.CardHeaderActions">
            <summary>
            If used renders child content of the CardHeaderActions.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.RowTemplate">
            <summary>
            Defines how a table row looks like. Use MudTd to define the table cells and their content.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.Items">
            <summary>
            The data to display in the table. MudTable will render one row per item
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.Filter">
            <summary>
            A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.SelectedItem">
            <summary>
            Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.SelectedItemChanged">
            <summary>
            Callback is called when a row has been clicked and returns the selected item.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.SelectedItems">
            <summary>
            If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.
            </summary>
        </member>
        <member name="P:MudBlazor.MudTable`1.SelectedItemsChanged">
            <summary>
            Callback is called whenever items are selected or deselected in multi selection mode.
            </summary>
        </member>
        <member name="M:MudBlazor.MudTableSortLabel`1.SetSortDirection(MudBlazor.SortDirection)">
            <summary>
            Set sort direction but don't update Table sort order. This should only be called by Table
            </summary>
        </member>
    </members>
</doc>
