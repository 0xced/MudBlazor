@namespace MudBlazor
@using MudBlazor.Utilities
@using MudBlazor.Extensions
@inherits MudComponentBase
@implements IDisposable


<aside @attributes="UserAttributes" class="@Classname" style="@Style">
    @ChildContent
</aside>


@code {

    protected string Classname =>
    new CssBuilder("mud-drawer")
      .AddClass($"mud-drawer-anchor-{Anchor.ToDescriptionString()}")
      .AddClass($"mud-drawer--open", Open)
      .AddClass($"mud-drawer--closed", !Open)
      .AddClass($"mud-drawer-clipped", Clipped)
      .AddClass($"mud-drawer-color-{Color.ToDescriptionString()}", Color != Color.Default)
      .AddClass($"mud-elevation-{Elevation.ToString()}")
      .AddClass(Class)
    .Build();

    /// <summary>
    /// The higher the number, the heavier the drop-shadow. 0 for no shadow.
    /// </summary>
    [Parameter] public int Elevation { set; get; } = 1;

    /// <summary>
    /// Side from which the drawer will appear.
    /// </summary>
    [Parameter] public Anchor Anchor { get; set; }

    /// <summary>
    /// The color of the component. It supports the theme colors.
    /// </summary>
    [Parameter] public Color Color { get; set; } = Color.Default;

    /// <summary>
    /// Child content of component.
    /// </summary>
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Open
    {
        get => _open;
        set
        {
            if (_open == value)
                return;
            _open = value;
            Layout?.FireDrawersChanged();
            StateHasChanged();
        }
    }

    private bool _open;
    private bool _clipped;

    [Parameter]
    public bool Clipped
    {
        get => _clipped;
        set
        {
            if (_clipped == value)
                return;
            _clipped = value;
            Layout?.FireDrawersChanged();
            StateHasChanged();
        }
    }

    [CascadingParameter] MudLayout Layout { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Layout?.Add(this);
    }


    public void Dispose()
    {
        try
        {
            Layout?.Remove(this);
        }
        catch (Exception) {}
    }


}