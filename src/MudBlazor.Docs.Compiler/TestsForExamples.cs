using System;
using System.IO;
using System.Linq;

namespace MudBlazor.Docs.Compiler
{
    public class TestsForExamples
    {
        public bool Execute()
        {
            var paths = new Paths();
            bool success = true;
            try
            {    
                Directory.CreateDirectory(paths.TestDirPath);

                using (var f = File.Create(paths.ComponentTestsFilePath))
                using (var w = new StreamWriter(f) { NewLine = "\n" })
                {
                    w.WriteLine("// NOTE: this file is autogenerated. Any changes will be overwritten!");
                    w.WriteLine(
                        @"using Microsoft.AspNetCore.Components;
    using Microsoft.Extensions.DependencyInjection;
    using NUnit.Framework;
    using MudBlazor.UnitTests.Mocks;
    using MudBlazor.Docs.Examples;
    using MudBlazor.Dialog;
    using MudBlazor.Services;

    namespace MudBlazor.UnitTests.Components
    {
        [TestFixture]
        public class _AllComponents
        {
            // These tests just check if all the examples from the doc page render without errors

    ");
                    foreach (var entry in Directory.EnumerateFiles(paths.DocsDirPath, "*.razor", SearchOption.AllDirectories)
                        .OrderBy(e => e.Replace("\\","/"), StringComparer.Ordinal))
                    {
                        if (entry.EndsWith("Code.razor"))
                            continue;
                        var filename = Path.GetFileName(entry);
                        var componentName = Path.GetFileNameWithoutExtension(filename);
                        if (!filename.Contains(Paths.ExampleDiscriminator))
                            continue;
                        w.WriteLine(
                            @$"
            [Test]
            public void {componentName}_Test()
            {{
                    using var ctx = new Bunit.TestContext();
                    ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                    ctx.Services.AddSingleton<IDialogService>(new DialogService());
                    ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                    ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                    var comp = ctx.RenderComponent<{componentName}>();
            }}
    ");
                    }

                    w.WriteLine(
                        @"    }
    }
    ");
                    w.Flush();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine($"Error generating {paths.ComponentTestsFilePath} : {e.Message}");
                success = false;
            }

            return success;
        }
    }
}