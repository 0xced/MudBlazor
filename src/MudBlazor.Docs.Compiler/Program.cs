using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace MudBlazor.Docs.Compiler
{
    class Program
    {
        const string DocDir = "MudBlazor.Docs";
        const string SnippetsFile = "Snippets.generated.cs";
        const string TestsFile = "_AllComponents.cs";
        const string ExampleDiscriminator = "Example";  // example components must contain this string

        static void Main(string[] args)
        {
            var path = Path.GetFullPath(".");
            var src_path = string.Join("/", path.Split('/', '\\').TakeWhile(x => x != "src").Concat(new[] { "src" }));
            var doc_path = Directory.EnumerateDirectories(src_path, DocDir).FirstOrDefault();
            if (doc_path == null)
                throw new InvalidOperationException("Directory not found: " + DocDir);
            var snippets_path = Directory.EnumerateFiles(doc_path, SnippetsFile, SearchOption.AllDirectories).FirstOrDefault();
            if (snippets_path == null)
                throw new InvalidOperationException("File not found: " + SnippetsFile);
            //Console.WriteLine(path);
            //Console.WriteLine(src_path);
            //Console.WriteLine(doc_path);
            CreateSnippets(snippets_path, doc_path);
            var test_path = Directory.EnumerateFiles(src_path, TestsFile, SearchOption.AllDirectories).FirstOrDefault();
            if (test_path == null)
                throw new InvalidOperationException("File not found: " + TestsFile);
            CreateTestsFromExamples(test_path, doc_path);
        }

        private static void CreateSnippets(string snippets_path, string doc_path)
        {
            using (var f = File.Open(snippets_path, FileMode.Create))
            using (var w = new StreamWriter(f))
            {
                w.WriteLine("// NOTE: this file is autogenerated. Any changes will be overwritten!");
                w.WriteLine(
                    @"namespace MudBlazor.Docs.Models
{
    public static partial class Snippets
    {
");
                foreach (var entry in Directory.EnumerateFiles(doc_path, "*.razor", SearchOption.AllDirectories))
                {
                    var filename = Path.GetFileName(entry);
                    var component_name = Path.GetFileNameWithoutExtension(filename);
                    if (!filename.Contains(ExampleDiscriminator))
                        continue;
                    Console.WriteLine("Found code snippet: " + component_name);
                    w.WriteLine($"public const string {component_name} = @\"```html");
                    var escaped_src = EscapeComponentSource(entry);
                    w.WriteLine(escaped_src.Replace("@code {", "```\n\n```csharp\n@code {"));
                    w.WriteLine("```\";");
                }

                w.WriteLine(
                    @"    }
}
");
                w.Flush();
            }
        }

        private static string EscapeComponentSource(string path)
        {
            var source = File.ReadAllText(path, Encoding.UTF8);
            source = Regex.Replace(source, "@using .+?\n", "");
            source = Regex.Replace(source, "@namespace .+?\n", "");
            return source.Replace("\"", "\"\"").Trim();
        }


        private static void CreateTestsFromExamples(string testPath, string docPath)
        {
            using (var f = File.Open(testPath, FileMode.Create))
            using (var w = new StreamWriter(f))
            {
                w.WriteLine("// NOTE: this file is autogenerated. Any changes will be overwritten!");
                w.WriteLine(
@"using MudBlazor.Docs;
using NUnit.Framework;

namespace MudBlazor.UnitTests.Components
{
    [TestFixture]
    public class _AllComponents
    {
        // These tests just check if all the examples from the doc page render without errors

");
                foreach (var entry in Directory.EnumerateFiles(docPath, "*.razor", SearchOption.AllDirectories))
                {
                    var filename = Path.GetFileName(entry);
                    var component_name = Path.GetFileNameWithoutExtension(filename);
                    if (!filename.Contains(ExampleDiscriminator))
                        continue;
                    w.WriteLine(
@$"
        [Test]
        public void {component_name}_Test()
        {{
                using var ctx = new Bunit.TestContext();
                var comp = ctx.RenderComponent<{component_name}>();
        }}
");
                }

                w.WriteLine(
                    @"    }
}
");
                w.Flush();
            }
        }
    }
}
